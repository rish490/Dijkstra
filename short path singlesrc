vector<int> dijkstra(vector<vector<int>> &vec, int n, int e, int src) {
   // cout<<vec[0][1]<<endl;
    vector<vector<pair<int,int>>>adj(n);
    for(int i=0;i<e;i++){
        int first=vec[i][0];
        int sec=vec[i][1];
        int third=vec[i][2];
        adj[first].push_back({sec,third});
        adj[sec].push_back({first,third});
    }
    vector<int>dp(n,INT_MAX);
    dp[src]=0;
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
    pq.push({dp[src],src});
    while(pq.empty()==false){
        pair<int,int>u=pq.top();
        pq.pop();
        int node=u.second;
        int dist=u.first;
        for(int i=0;i<adj[u.second].size();i++){
            int curr=adj[u.second][i].first;
            int d=adj[u.second][i].second;
            if(dp[curr]>d+dist){
                dp[curr]=d+dist;
                pq.push({dp[curr],curr});
            }
        }
    }
    return dp;
}
